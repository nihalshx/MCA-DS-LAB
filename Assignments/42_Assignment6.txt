Program 1:
Write a C program to implement Set data structure using Bit Vector representation and perform operations such Union, Intersection, Set Complement and Set Difference.


Roll No: 42
Name: Nihal N



Program Code:

#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define UNIVERSAL_SIZE 26

void createBitVector(char set[], int bit_vector[]) {
    memset(bit_vector, 0, UNIVERSAL_SIZE * sizeof(int));
    for (int i = 0; set[i] != '\0'; i++) {
        if (isalpha(set[i])) {
            bit_vector[tolower(set[i]) - 'a'] = 1;
        }
    }
}

void printBitVector(int bit_vector[]) {
    for (int i = 0; i < UNIVERSAL_SIZE; i++) {
        printf("%d", bit_vector[i]);
    }
    printf("\n");
}

void performUnion(int set1[], int set2[], int result[]) {
    for (int i = 0; i < UNIVERSAL_SIZE; i++) {
        result[i] = set1[i] | set2[i];
    }
}

void performIntersection(int set1[], int set2[], int result[]) {
    for (int i = 0; i < UNIVERSAL_SIZE; i++) {
        result[i] = set1[i] & set2[i];
    }
}

void performComplement(int set[], int result[]) {
    for (int i = 0; i < UNIVERSAL_SIZE; i++) {
        result[i] = !set[i];
    }
}

void performDifference(int set1[], int set2[], int result[]) {
    for (int i = 0; i < UNIVERSAL_SIZE; i++) {
        result[i] = set1[i] & !set2[i];
    }
}

int main() {
    char set1[UNIVERSAL_SIZE + 1], set2[UNIVERSAL_SIZE + 1];
    int set1_bit[UNIVERSAL_SIZE], set2_bit[UNIVERSAL_SIZE], result[UNIVERSAL_SIZE];
    int choice;

    printf("Enter elements for Set 1 (lowercase letters only): ");
    scanf("%s", set1);
    printf("Enter elements for Set 2 (lowercase letters only): ");
    scanf("%s", set2);

    createBitVector(set1, set1_bit);
    createBitVector(set2, set2_bit);

    printf("\nBit Vector of Set 1:\n");
    printBitVector(set1_bit);
    printf("Bit Vector of Set 2:\n");
    printBitVector(set2_bit);

    do {
        printf("\nOperations:\n");
        printf("1. Union\n");
        printf("2. Intersection\n");
        printf("3. Complement\n");
        printf("4. Difference (Set1 - Set2)\n");
        printf("5. Exit\n");
        printf("Choose an option: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                performUnion(set1_bit, set2_bit, result);
                printf("\nUnion:\n");
                printBitVector(result);
                break;
            case 2:
                performIntersection(set1_bit, set2_bit, result);
                printf("\nIntersection:\n");
                printBitVector(result);
                break;
            case 3:
                performComplement(set1_bit, result);
                printf("\nComplement of Set 1:\n");
                printBitVector(result);
                performComplement(set2_bit, result);
                printf("\nComplement of Set 2:\n");
                printBitVector(result);
                break;
            case 4:
                performDifference(set1_bit, set2_bit, result);
                printf("\nDifference (Set1 - Set2):\n");
                printBitVector(result);
                performDifference(set2_bit, set1_bit, result);
                printf("\nDifference (Set2 - Set1):\n");
                printBitVector(result);
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Try again.\n");
        }
    } while (choice != 5);

    return 0;
}


Program 2
Write a C program to implement Disjoint data structure using an array and perform operations such as MakeSet, FindSet and Union (using union-rank algorithm)

Roll No: 42
Name: Nihal N



Program Code:
#include <stdio.h>
#include <stdlib.h>

struct node {
    struct node *rep;
    struct node *next;
    int data;
    int rank; // Adding rank field
};

struct node *heads[50], *tails[50];
int countRoot = 0;

void makeSet(int x) {
    struct node *new = (struct node *)malloc(sizeof(struct node));
    new->rep = new;
    new->next = NULL;
    new->data = x;
    new->rank = 0; // Initialize rank to 0
    heads[countRoot] = new;
    tails[countRoot++] = new;
}

struct node *find(int a) {
    int i;
    for (i = 0; i < countRoot; i++) {
        struct node *tmp = heads[i];
        while (tmp != NULL) {
            if (tmp->data == a) {
                return tmp->rep;
            }
            tmp = tmp->next;
        }
    }
    return NULL;
}

void unionSets(int a, int b) {
    struct node *rep1 = find(a);
    struct node *rep2 = find(b);

    if (rep1 == NULL || rep2 == NULL) {
        printf("\nElement not present in the DS\n");
        return;
    }

    if (rep1 != rep2) {
        if (rep1->rank < rep2->rank) {
            rep1->rep = rep2;
        } else if (rep1->rank > rep2->rank) {
            rep2->rep = rep1;
        } else {
            rep2->rep = rep1;
            rep1->rank++;
        }

        // Merging the sets
        struct node *tmp = rep2;
        while (tmp->next != NULL) {
            tmp = tmp->next;
        }
        tmp->next = rep1;
    }
}

int search(int x) {
    int i;
    for (i = 0; i < countRoot; i++) {
        struct node *tmp = heads[i];
        if (tmp->data == x) {
            return 1;
        }
        while (tmp != NULL) {
            if (tmp->data == x) {
                return 1;
            }
            tmp = tmp->next;
        }
    }
    return 0;
}

int main() {
    int choice, x, y;
    do {
        printf("\n.......MENU.......\n\n1.Make Set\n2.Display set representatives\n3.Union\n4.Find Set\n5.Exit\n");
        printf("Enter your choice : ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("\nEnter new element : ");
                scanf("%d", &x);
                if (search(x) == 1) {
                    printf("\nElement already present in the disjoint set DS\n");
                } else {
                    makeSet(x);
                }
                break;
            case 2:
                printf("\n");
                for (int i = 0; i < countRoot; i++) {
                    printf("%d ", heads[i]->data);
                }
                printf("\n");
                break;
            case 3:
                printf("\nEnter first element : ");
                scanf("%d", &x);
                printf("\nEnter second element : ");
                scanf("%d", &y);
                unionSets(x, y);
                break;
            case 4:
                printf("\nEnter the element: ");
                scanf("%d", &x);
                struct node *rep = find(x);
                if (rep == NULL) {
                    printf("\nElement not present in the DS\n");
                } else {
                    printf("\nThe representative of %d is %d\n", x, rep->data);
                }
                break;
            case 5:
                exit(0);
            default:
                printf("\nWrong choice\n");
                break;
        }
    } while (1);

    return 0;
}

